// Code generated by Kitex v0.5.2. DO NOT EDIT.

package server1

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	api "hertz_demo/kitex_gen/api"
)

func serviceInfo() *kitex.ServiceInfo {
	return server1ServiceInfo
}

var server1ServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Server1"
	handlerType := (*api.Server1)(nil)
	methods := map[string]kitex.MethodInfo{
		"add":      kitex.NewMethodInfo(addHandler, newServer1AddArgs, newServer1AddResult, false),
		"subtract": kitex.NewMethodInfo(subtractHandler, newServer1SubtractArgs, newServer1SubtractResult, false),
		"multiply": kitex.NewMethodInfo(multiplyHandler, newServer1MultiplyArgs, newServer1MultiplyResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server1AddArgs)
	realResult := result.(*api.Server1AddResult)
	success, err := handler.(api.Server1).Add(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer1AddArgs() interface{} {
	return api.NewServer1AddArgs()
}

func newServer1AddResult() interface{} {
	return api.NewServer1AddResult()
}

func subtractHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server1SubtractArgs)
	realResult := result.(*api.Server1SubtractResult)
	success, err := handler.(api.Server1).Subtract(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer1SubtractArgs() interface{} {
	return api.NewServer1SubtractArgs()
}

func newServer1SubtractResult() interface{} {
	return api.NewServer1SubtractResult()
}

func multiplyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.Server1MultiplyArgs)
	realResult := result.(*api.Server1MultiplyResult)
	success, err := handler.(api.Server1).Multiply(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newServer1MultiplyArgs() interface{} {
	return api.NewServer1MultiplyArgs()
}

func newServer1MultiplyResult() interface{} {
	return api.NewServer1MultiplyResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, req *api.AddRequest) (r *api.AddResponse, err error) {
	var _args api.Server1AddArgs
	_args.Req = req
	var _result api.Server1AddResult
	if err = p.c.Call(ctx, "add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Subtract(ctx context.Context, req *api.SubtractRequest) (r *api.SubtractResponse, err error) {
	var _args api.Server1SubtractArgs
	_args.Req = req
	var _result api.Server1SubtractResult
	if err = p.c.Call(ctx, "subtract", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Multiply(ctx context.Context, req *api.MultiplyRequest) (r *api.MultiplyResponse, err error) {
	var _args api.Server1MultiplyArgs
	_args.Req = req
	var _result api.Server1MultiplyResult
	if err = p.c.Call(ctx, "multiply", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
