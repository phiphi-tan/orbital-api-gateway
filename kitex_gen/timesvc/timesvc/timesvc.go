// Code generated by Kitex v0.5.2. DO NOT EDIT.

package timesvc

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	timesvc "github.com/phiphi-tan/orbital-api-gateway/kitex_gen/timesvc"
)

func serviceInfo() *kitex.ServiceInfo {
	return timeSvcServiceInfo
}

var timeSvcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "TimeSvc"
	handlerType := (*timesvc.TimeSvc)(nil)
	methods := map[string]kitex.MethodInfo{
		"getTime": kitex.NewMethodInfo(getTimeHandler, newTimeSvcGetTimeArgs, newTimeSvcGetTimeResult, false),
		"getDate": kitex.NewMethodInfo(getDateHandler, newTimeSvcGetDateArgs, newTimeSvcGetDateResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "timesvc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func getTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*timesvc.TimeSvcGetTimeArgs)
	realResult := result.(*timesvc.TimeSvcGetTimeResult)
	success, err := handler.(timesvc.TimeSvc).GetTime(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTimeSvcGetTimeArgs() interface{} {
	return timesvc.NewTimeSvcGetTimeArgs()
}

func newTimeSvcGetTimeResult() interface{} {
	return timesvc.NewTimeSvcGetTimeResult()
}

func getDateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*timesvc.TimeSvcGetDateArgs)
	realResult := result.(*timesvc.TimeSvcGetDateResult)
	success, err := handler.(timesvc.TimeSvc).GetDate(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTimeSvcGetDateArgs() interface{} {
	return timesvc.NewTimeSvcGetDateArgs()
}

func newTimeSvcGetDateResult() interface{} {
	return timesvc.NewTimeSvcGetDateResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetTime(ctx context.Context, req *timesvc.TimeReq) (r *timesvc.TimeResp, err error) {
	var _args timesvc.TimeSvcGetTimeArgs
	_args.Req = req
	var _result timesvc.TimeSvcGetTimeResult
	if err = p.c.Call(ctx, "getTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDate(ctx context.Context, req *timesvc.DateReq) (r *timesvc.DateResp, err error) {
	var _args timesvc.TimeSvcGetDateArgs
	_args.Req = req
	var _result timesvc.TimeSvcGetDateResult
	if err = p.c.Call(ctx, "getDate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
